generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Coordinates {
  longitude String
  latitude  String
}

type HotelImages {
  src String
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  password  String
  username  String   @unique
}

model Hotels {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  hotel_name  String?
  description String
  single      Boolean
  double      Boolean
  location    String
  rating      Float?
  images      HotelImages[]
}

model Locations {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime      @default(now())
  location_name String
  description   String
  active        Boolean
  coordinates   Coordinates[]
}

model Packages {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  package_type   String
  duration       Int
  title          String        @unique
  price          Float
  overview       String?
  packageimg     String?
  discount_type  String?
  discount_value Float?
  Final_price    Float?
  includes       Includes[]
  itineraries    Itineraries[]
  Guide          Guidelist[]
  reviews        Reviews[]
}

model PackageType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  label     String   @unique
  value     String   @unique
}

model IncludesType {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  title      String   @unique
  include_id String   @unique
}

type Guidelist {
  Guide_name        String
  Guide_designation String
  Guide_description String?
  Guide_social      String
  Guide_thumbnail   String
}

type Reviews {
  Comment      String?
  description  String?
  rating       Int     @default(0)
  thumbnailUrl String?
}

type Includes {
  include_id String
  title      String
}

type Itineraries {
  title       String
  description String
  activities  Activities[]
}

type Activities {
  activitie_name String
  description    String
  location       String
  timings        String
  images         String?
}

model Mytrip {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  email          String
  phone_number   Int
  date           String?
  number_of_days Int?
  adults         Int?
  big_childs     Int?
  small_childs   Int?
  hotel_type     String?
  ac_non_Ac      String?
  No_of_Rooms    Int?
  water_sports   WaterSports[]
  islands        Islands[]
  beaches        Beaches[]
}

type WaterSports {
  label String
  value String
}

type Islands {
  label String
  value String
}

type Beaches {
  label String
  value String
}

model Sports {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  label     String
  value     String
  island    String
  Beach     String
  image     String?
}

model Islandsplaces {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  label     String
  value     String
  image     String?
}

model Beachesplaces {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  label     String
  value     String
  island    String
  image     String?
}

model Posts {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  blocks    Blocks[]
  entityMap entityMap[]
}

type Blocks {
  key               String?
  text              String?
  type              String?
  depth             Int?
  inlineStyleRanges inlineStyleRanges[]
  entityRanges      entityRanges[]
  data              data[]
}

type inlineStyleRanges {
  length Int?
  offset Int?
  style  String?
}

type entityRanges {
  key    Int?
  length Int?
  offset Int?
}

type data {
  textAlign String?
}

type entityMap {
  type       String?
  mutability String?
  data       entitydata[]
}

type entitydata {
  url          String?
  targetOption String?
  src          String?
  height       String?
  width        String?
  alignment    String?
}
